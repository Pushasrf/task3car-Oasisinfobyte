# -*- coding: utf-8 -*-
"""cartask3_oibsip.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y3C9J9rsf4Raw92fY2mqdI5Qizy9UQZy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler, OneHotEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import r2_score

df = pd.read_csv('/content/car data.csv')
df.head()

df.dtypes

df.describe(include="O")

t = df["Car_Name"].value_counts().reset_index()
cnt = t[t["count"] > 5].count()
cnt

df.describe()

X = df.drop("Selling_Price", axis=1)
y = df["Selling_Price"]

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=2)
print(X_train.shape, X_test.shape)

cat_cols = X_train.select_dtypes(include = 'O').columns.to_list()
num_cols = X_train.select_dtypes(exclude = "O").columns.to_list()
print(cat_cols)
print(num_cols)

enc=OneHotEncoder(max_categories =5, handle_unknown = "ignore",sparse_output=False)
x_train_enc = enc.fit_transform(X_train[cat_cols])
x_train_enc = pd.DataFrame(x_train_enc, columns = enc.get_feature_names_out(cat_cols))
#X_train_dummy = pd.get_dummies(X_train, drop_first = True)
x_train_ = x_train_enc.join(df[num_cols])
x_train_

scores = cross_val_score(LinearRegression(),x_train_, y_train,cv=3, scoring='r2')
print(f"Scores without applying any scaling technique on numeric columns: {scores}")

# Using Standard Scaler on numeric columns
preprocessor = ColumnTransformer(transformers=[
                                ("cat", OneHotEncoder(max_categories=5, handle_unknown = "ignore"),cat_cols),
                                ("num", StandardScaler(), num_cols)
])

reg_pipeline = Pipeline([
                       ('preprocessor', preprocessor),
                       ('classiifer', LinearRegression())
])

scores = cross_val_score(reg_pipeline,X_train, y_train, cv=3, scoring='r2')

print(scores)

#Using Robust scaler on numerical features.
preprocessor_r = ColumnTransformer(transformers=[
                                ("cat_", OneHotEncoder(max_categories=5, handle_unknown = "ignore"),cat_cols),
                                ("num_r", RobustScaler(), num_cols)
])

reg_pipeline_r = Pipeline([
                       ('preprocessor', preprocessor_r),
                       ('classiifer', LinearRegression())
])
reg_pipeline_r

scores_r = cross_val_score(reg_pipeline_r,X_train, y_train, cv=3, scoring='r2')

print(scores_r)

#Using MinMax scaler on numerical features.. Model performance is worst when data is normalised.
preprocessor_m = ColumnTransformer(transformers=[
                                ("cat_m", OneHotEncoder(max_categories=5, handle_unknown = "ignore"),cat_cols),
                                ("num_m", MinMaxScaler(feature_range=(0,1)), num_cols)
])

reg_pipeline_m = Pipeline([
                       ('preprocessor', preprocessor_m),
                       ('classiifer', LinearRegression())
])
reg_pipeline_m

scores1 = cross_val_score(reg_pipeline_m,X_train, y_train, cv=3, scoring='r2')

print(scores1)